diff --git i/.dockerignore w/.dockerignore
index 7a2fc0a..19cdd91 100644
--- i/.dockerignore
+++ w/.dockerignore
@@ -1,6 +1,4 @@
 .git
-config.json
-logs
-certs
-cdn
 node_modules
+dist
+logs
diff --git i/Dockerfile w/Dockerfile
index a810a90..4f2eb80 100644
--- i/Dockerfile
+++ w/Dockerfile
@@ -1,16 +1,45 @@
-FROM node:18-alpine
+# syntax=docker/dockerfile:1
 
-RUN apk add --no-cache python3 make gcc g++ 
-WORKDIR /app
+ARG app_dir="/home/node/app"
 
-COPY "docker/entrypoint.sh" ./
 
-COPY package*.json ./
-RUN npm install bcrypt && npm rebuild bcrypt --build-from-source
-RUN npm install
+# * Base Node.js image
+FROM node:20-alpine AS base
+ARG app_dir
+WORKDIR ${app_dir}
 
-COPY . ./
 
-VOLUME [ "/app/config.json", "/app/certs" ]
+# * Installing production dependencies
+FROM base AS dependencies
 
-CMD ["sh", "entrypoint.sh"]
+RUN --mount=type=bind,source=package.json,target=package.json \
+	--mount=type=bind,source=package-lock.json,target=package-lock.json \
+	--mount=type=cache,target=/root/.npm \
+	npm ci --omit=dev
+
+
+# * Installing development dependencies and building the application
+FROM base AS build
+
+RUN --mount=type=bind,source=package.json,target=package.json \
+	--mount=type=bind,source=package-lock.json,target=package-lock.json \
+	--mount=type=cache,target=/root/.npm \
+	npm ci
+
+COPY . .
+RUN npm run build
+
+
+# * Running the final application
+FROM base AS final
+ARG app_dir
+
+ENV NODE_ENV production
+USER node
+
+COPY package.json .
+
+COPY --from=dependencies ${app_dir}/node_modules ${app_dir}/node_modules
+COPY --from=build ${app_dir}/dist ${app_dir}/dist
+
+CMD ["node", "."]
